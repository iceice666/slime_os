use std::fs;
use std::path::{Path, PathBuf};

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;
const KERNEL_BINARY: &str = "../kernel/target/x86_64-unknown-none/debug/slime_os-kernel";

fn main() -> Result<()> {
    cargo_emit::rerun_if_changed!(KERNEL_BINARY);

    let out_dir = get_out_dir()?;
    let kernel = PathBuf::from(KERNEL_BINARY);

    build_disk_images(&out_dir, &kernel)?;
    build_debug_script(&kernel)?;

    Ok(())
}

fn get_out_dir() -> Result<PathBuf> {
    std::env::var_os("OUT_DIR")
        .map(PathBuf::from)
        .ok_or("OUT_DIR environment variable not set".into())
}

fn build_disk_images(out_dir: &Path, kernel: &Path) -> Result<()> {
    // Ensure output directory exists
    fs::create_dir_all(out_dir)?;

    let uefi_path = out_dir.join("uefi.img");
    bootloader::UefiBoot::new(kernel)
        .create_disk_image(&uefi_path)
        .map_err(|e| format!("Failed to create UEFI disk image: {}", e))?;

    cargo_emit::rustc_env!("UEFI_PATH", "{}", uefi_path.display().to_string());
    cargo_emit::warning!("Created disk images under {}", out_dir.display());
    Ok(())
}

fn build_debug_script(kernel: &Path) -> Result<()> {
    let debug_script_path = PathBuf::from("../debug.sh");
    let content = generate_debug_script_content(kernel);

    fs::write(&debug_script_path, content).map_err(|e| {
        format!(
            "Failed to write debug script to {}: {}",
            debug_script_path.display(),
            e
        )
    })?;

    // Make script executable on Unix systems
    #[cfg(unix)]
    {
        use std::os::unix::fs::PermissionsExt;
        let mut perms = fs::metadata(&debug_script_path)?.permissions();
        perms.set_mode(0o755);
        fs::set_permissions(&debug_script_path, perms)?;
    }

    Ok(())
}

fn generate_debug_script_content(kernel: &Path) -> String {
    let kernel_path = kernel.display();
    format!(
        r#"#!/bin/bash
# Auto-generated debug script for SlimeOS kernel
# Generated by build.rs - do not edit manually

set -euo pipefail

KERNEL_PATH="{kernel_path}"
LLDB_CMD="${{LLDB_CMD:-rust-lldb}}"

if [[ ! -f "$KERNEL_PATH" ]]; then
    echo "Error: Kernel binary not found at $KERNEL_PATH" >&2
    exit 1
fi

echo "Starting LLDB debugging session for SlimeOS kernel..."
echo "Kernel: $KERNEL_PATH"
echo "GDB remote port: 1234"

"$LLDB_CMD" \
    -o "target create $KERNEL_PATH" \
    -o "target modules load --file $KERNEL_PATH --slide 0x8000000000" \
    -o "gdb-remote localhost:1234" \
    -o "b kernel_main" \
    -o "c"
"#
    )
}
