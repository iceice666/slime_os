use anyhow::{Result, anyhow};
use std::path::{Path, PathBuf};
use std::fs;

fn main() -> Result<()> {
    let kernel_path = PathBuf::from("../kernel/target/slime_os-kernel").canonicalize()?;
    let out_dir = PathBuf::from("target").canonicalize()?;
    let uefi_path = out_dir.join("uefi.img");
    let additional_args = std::env::args().skip(1);

    build_disk_images(&out_dir, &kernel_path, &uefi_path)?;
    build_debug_script(&kernel_path)?;

    start_qemu(&uefi_path, additional_args);
    Ok(())
}

fn build_disk_images(out_dir: &Path, kernel: &Path, uefi_path: &Path) -> Result<()> {
    // Ensure output directory exists
    fs::create_dir_all(out_dir)?;

    bootloader::UefiBoot::new(kernel).create_disk_image(uefi_path)?;

    Ok(())
}

fn build_debug_script(kernel: &Path) -> Result<()> {
    let debug_script_path = PathBuf::from("../debug.sh");
    let content = generate_debug_script_content(kernel);

    fs::write(&debug_script_path, content).map_err(|e| {
        anyhow!(
            "Failed to write debug script to {}: {}",
            debug_script_path.display(),
            e
        )
    })?;

    // Make script executable on Unix systems
    #[cfg(unix)]
    {
        use std::os::unix::fs::PermissionsExt;
        let mut perms = fs::metadata(&debug_script_path)?.permissions();
        perms.set_mode(0o755);
        fs::set_permissions(&debug_script_path, perms)?;
    }

    Ok(())
}

fn generate_debug_script_content(kernel: &Path) -> String {
    let kernel_path = kernel.display();
    format!(
        r#"#!/bin/bash
# Auto-generated debug script for SlimeOS kernel
# Generated by build.rs - do not edit manually

set -euo pipefail

KERNEL_PATH="{kernel_path}"
LLDB_CMD="${{LLDB_CMD:-rust-lldb}}"

if [[ ! -f "$KERNEL_PATH" ]]; then
    echo "Error: Kernel binary not found at $KERNEL_PATH" >&2
    exit 1
fi

echo "Starting LLDB debugging session for SlimeOS kernel..."
echo "Kernel: $KERNEL_PATH"
echo "GDB remote port: 1234"

"$LLDB_CMD" \
    -o "target create $KERNEL_PATH" \
    -o "target modules load --file $KERNEL_PATH --slide 0x8000000000" \
    -o "gdb-remote localhost:1234" \
    -o "b _start" \
    -o "c"
"#
    )
}

fn start_qemu(uefi_path: &Path, additional_args: impl Iterator<Item = String>) {
    let uefi_path = uefi_path.display();

    let mut cmd = std::process::Command::new("qemu-system-x86_64");

    cmd.arg("-bios").arg(ovmf_prebuilt::ovmf_pure_efi());
    cmd.arg("-drive")
        .arg(format!("format=raw,file={uefi_path}"));

    println!("BIOS: {}", ovmf_prebuilt::ovmf_pure_efi().display());
    println!("DRIVE: {uefi_path}");

    cmd.args([
        "-device",
        "isa-debug-exit,iobase=0xf4,iosize=0x04",
        "-serial",
        "stdio",
    ]);

    cmd.args(additional_args);

    let mut child = cmd.spawn().unwrap();
    child.wait().unwrap();
}
